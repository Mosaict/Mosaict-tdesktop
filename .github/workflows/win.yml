# .github/workflows/win.yml

name: Windows.

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'changelog.txt'
      - 'LEGAL'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/win.yml'
      - 'lib/xdg/**'
      - 'snap/**'
      - 'Telegram/build/docker/**'
      - 'Telegram/Resources/uwp/**'
      - 'Telegram/SourceFiles/platform/linux/**'
      - 'Telegram/SourceFiles/platform/mac/**'
      - 'Telegram/Telegram/**'
      - 'Telegram/configure.sh'
      - 'Telegram/Telegram.plist'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'changelog.txt'
      - 'LEGAL'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/win.yml'
      - 'lib/xdg/**'
      - 'snap/**'
      - 'Telegram/build/docker/**'
      - 'Telegram/Resources/uwp/**'
      - 'Telegram/SourceFiles/platform/linux/**'
      - 'Telegram/SourceFiles/platform/mac/**'
      - 'Telegram/Telegram/**'
      - 'Telegram/configure.sh'
      - 'Telegram/Telegram.plist'

jobs:

  windows:
    name: Windows
    runs-on: windows-latest

    strategy:
      fail-fast: false #忽略其他架构构建错误，继续构建其他架构
      matrix:
        arch: [Win32, x64]
        generator: ["", "Ninja Multi-Config"]

    env:
      UPLOAD_ARTIFACT: "true"
      ONLY_CACHE: "false"
      PREPARE_PATH: "Telegram/build/prepare/prepare.py"

    defaults:
      run:
        shell: cmd

    steps:
      - name: Prepare directories.
        run: |
          mkdir %userprofile%\TBuild\Libraries
          mklink /d %GITHUB_WORKSPACE%\TBuild %userprofile%\TBuild
          echo TBUILD=%GITHUB_WORKSPACE%\TBuild>>%GITHUB_ENV%

      - name: Get repository name.
        shell: bash
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - uses: ilammy/msvc-dev-cmd@v1.13.0
        name: Native Tools Command Prompt.
        with:
          arch: ${{ matrix.arch }}

      - name: Clone.
        uses: actions/checkout@v4
        with:
          submodules: recursive
          path: ${{ env.TBUILD }}\${{ env.REPO_NAME }}

      - name: Set up environment paths.
        shell: bash
        run: |
          echo "CACHE_KEY=$(sha256sum $TBUILD/$REPO_NAME/$PREPARE_PATH | awk '{ print $1 }')" >> $GITHUB_ENV

          echo "Configurate git for cherry-picks."
          git config --global user.email "you@example.com"
          git config --global user.name "Sample"

      - name: NuGet sources.
        run: |
          nuget sources Disable -Name "Microsoft Visual Studio Offline Packages"
          nuget sources Add -Source https://api.nuget.org/v3/index.json & exit 0

      - name: ThirdParty cache.
        id: cache-third-party
        uses: actions/cache@v4
        with:
          path: ${{ env.TBUILD }}\ThirdParty
          key: ${{ runner.OS }}-${{ matrix.arch }}-third-party-${{ env.CACHE_KEY }}
          restore-keys: ${{ runner.OS }}-${{ matrix.arch }}-third-party-

      - name: Libraries cache.
        id: cache-libs
        uses: actions/cache@v4
        with:
          path: ${{ env.TBUILD }}\Libraries
          key: ${{ runner.OS }}-${{ matrix.arch }}-libs-${{ env.CACHE_KEY }}
          restore-keys: ${{ runner.OS }}-${{ matrix.arch }}-libs-

      - name: Libraries.
        env:
          GYP_MSVS_OVERRIDE_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\'
          GYP_MSVS_VERSION: 2022
        run: |
          cd %TBUILD%
          %REPO_NAME%\Telegram\build\prepare\win.bat skip-release silent

      - name: Read configuration matrix.
        shell: bash
        run: |
          ARTIFACT_NAME="Telegram"

          ARCH=""
          if [ -n "${{ matrix.arch }}" ]; then
            case "${{ matrix.arch }}" in
              Win32) ARCH="x86";;
              *) ARCH="${{ matrix.arch }}";;
            esac
            echo "Architecture from matrix: $ARCH"
            ARTIFACT_NAME="${ARTIFACT_NAME}_${{ matrix.arch }}"
          fi

          GENERATOR=""
          if [ -n "${{ matrix.generator }}" ]; then
            GENERATOR="-G \"${{ matrix.generator }}\""
            echo "Generator from matrix: $GENERATOR"
            ARTIFACT_NAME="${ARTIFACT_NAME}_${{ matrix.generator }}"
          fi
          echo "TDESKTOP_BUILD_GENERATOR=$GENERATOR" >> $GITHUB_ENV

          [ -n "$GENERATOR" ] && ARCH=""
          echo "TDESKTOP_BUILD_ARCH=$ARCH" >> $GITHUB_ENV

          DEFINE=""
          if [ -n "${{ matrix.defines }}" ]; then
            DEFINE="-D ${{ matrix.defines }}=ON"
            echo "Define from matrix: $DEFINE"
            ARTIFACT_NAME="${ARTIFACT_NAME}_${{ matrix.defines }}"
          fi
          echo "TDESKTOP_BUILD_DEFINE=$DEFINE" >> $GITHUB_ENV

          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

          API="-D TDESKTOP_API_TEST=ON"
          if [ $GITHUB_REF == 'refs/heads/nightly' ]; then
            echo "Use the open credentials."
            API="-D TDESKTOP_API_ID=611335 -D TDESKTOP_API_HASH=d524b414d21f4d37f08684c1df41ac9c"
          fi
          echo "TDESKTOP_BUILD_API=$API" >> $GITHUB_ENV

      - name: Free up some disk space.
        run: |
          cd %TBUILD%
          del /S Libraries\*.pdb
          del /S Libraries\*.pch
          del /S Libraries\*.obj

      # --- START OF THE FINALLY CORRECTED PATCH STEP ---
      - name: Patch cmake/options_win.cmake for WinRT fix
        shell: bash # 使用 bash shell 来执行 sed 命令
        run: |
          # 构造外部 submodule 'cmake' 目录的完整路径，它在仓库的根目录
          CMAKE_SUBMODULE_DIR="$TBUILD/$REPO_NAME/cmake"
          PATCH_TARGET_FILE="options_win.cmake" # 我们确定要修改的文件名
          FULL_PATCH_FILE_PATH="$CMAKE_SUBMODULE_DIR/$PATCH_TARGET_FILE"
          
          echo "Current working directory before patch attempt: $(pwd)"
          echo "Attempting to change current working directory to: $CMAKE_SUBMODULE_DIR"
          
          # 尝试进入目标目录
          cd "$CMAKE_SUBMODULE_DIR" || { echo "ERROR: Could not change directory to $CMAKE_SUBMODULE_DIR. Is the 'cmake' submodule cloned correctly at the repository root? Exiting."; exit 1; }
          
          echo "Successfully changed current working directory to: $(pwd)"
          
          # 验证 options_win.cmake 文件是否存在于当前目录
          echo "Verifying $PATCH_TARGET_FILE existence in current directory:"
          if [ ! -f "$PATCH_TARGET_FILE" ]; then
            echo "ERROR: $PATCH_TARGET_FILE not found in $(pwd)."
            echo "This indicates that the external 'cmake' submodule does not contain this file, or it's misnamed."
            # 为了更全面的调试，列出整个子模块的内容
            echo "--- Listing contents of the external cmake submodule (current directory) ---"
            ls -RF . || true # ls -RF . 会在当前目录执行，如果失败也不中断
            echo "----------------------------------------------------------------------------"
            exit 1
          fi
          echo "$PATCH_TARGET_FILE found. Proceeding with patch."

          # 应用补丁：在 'Bcrypt' 所在行之后插入 runtimeobject.lib 和 windowsapp.lib
          # 现在 sed 可以直接对相对路径 'options_win.cmake' 操作
          sed -i '/Bcrypt/a \    runtimeobject.lib\n\    windowsapp.lib' "$PATCH_TARGET_FILE"
          
          # 【可选】为了调试目的，打印修改后的文件内容以确认补丁是否生效
          echo "--- Patched $PATCH_TARGET_FILE content ---"
          cat "$PATCH_TARGET_FILE"
          echo "----------------------------------------------"
      # --- END OF THE FINALLY CORRECTED PATCH STEP ---

      - name: Telegram Desktop build.
        if: env.ONLY_CACHE == 'false'
        run: |
          cd %TBUILD%\%REPO_NAME%\Telegram

          call configure.bat ^
          %TDESKTOP_BUILD_GENERATOR% ^
          %TDESKTOP_BUILD_ARCH% ^
          %TDESKTOP_BUILD_API% ^
          -D CMAKE_C_FLAGS="/WX" ^
          -D CMAKE_CXX_FLAGS="/WX" ^
          -D DESKTOP_APP_DISABLE_AUTOUPDATE=OFF ^
          -D DESKTOP_APP_DISABLE_CRASH_REPORTS=OFF ^
          -D DESKTOP_APP_NO_PDB=ON ^
          %TDESKTOP_BUILD_DEFINE%

          cmake --build ..\out --config Debug --parallel

      - name: Move artifact.
        if: (env.UPLOAD_ARTIFACT == 'true') || (github.ref == 'refs/heads/nightly')
        run: |
          set OUT=%TBUILD%\%REPO_NAME%\out\Debug
          mkdir artifact
          move %OUT%\Teamgram.exe artifact/
          move %OUT%\Updater.exe artifact/
          
      - uses: actions/upload-artifact@v4
        name: Upload artifact.
        if: (env.UPLOAD_ARTIFACT == 'true') || (github.ref == 'refs/heads/nightly')
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifact\
